
name: Dart CI
#set conditions to trigger on
on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  schedule:
    - cron: "0 0 * * 0"
# define what happens when conditions are met
jobs:
  # Check code formatting and static analysis on three OS (linux, macOS, and windows)
  # against dev, beta, stable, and 2.12
  analyze:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        sdk: [stable, beta, dev, 2.12.0]
    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1.0
        with:
          sdk: ${{ matrix.sdk }}
      - id: install
        name: Install dependencies
        run: pub get
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        if: matrix.sdk == 'dev' && steps.install.outcome == 'success'

      - name: Analyze project source
        run: dart analyze --fatal-infos
        if: always() && steps.install.outcome == 'success'
  # Check code formatting and static analysis on three OS (linux, macOS, and windows)
  # The Dart 2.10 SDK introduced a new unified dart developer tool, which is what we use in the usage examples above for installing dependencies, verifying formatting, analyzing, etc.
  # Testing against 2.9.0 and 2.8.1 should give us enough coverage to ensure compatibility with older versions of the Dart SDK
  analyze_old_sdks:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        sdk: [2.9.0, 2.8.1]
    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1.0
        with:
          sdk: ${{ matrix.sdk }}
      - id: install
        name: Install dependencies
        run: pub get
      - name: Check formatting
        run: dartfmt --dry-run --set-exit-if-changed .
        if: always() && steps.install.outcome == 'succcess'
      - name: Analyze project source
        run: dartanalyzer --fatal-warnings .
        if: always() && steps.install.outcome == 'success'
  # Run tests on a matrix consisting of two dimensions:
  # 1. OS: ubuntu-latest, macos-latest, windows-latest
  # 2. Release channel: dev, stable, and 2.12.0
  test:
    needs: analyze
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        sdk: [dev, stable, 2.12.0]
    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1.0
        with:
          sdk: ${{ matrix.sdk }}
      - id: install
        name: Install dependencies
        run: dart pub get
      - name: Run VM tests
        run: dart test --platform vm
        if: always() && steps.install.outcome == 'success'
      - name: Run Chrome tests
        run: dart test --platform chrome
        if: always() && steps.install.outcome == 'success'
  # Run tests on a matrix consisting of two dimensions:
  # 1. OS: ubuntu-latest, macos-latest, windows-latest
  # 2. Release channel: 2.9.0, 2.8.1
  test_old_sdks:
    needs: analyze
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        sdk: [2.9.0, 2.8.1]
    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1.0
        with:
          sdk: ${{ matrix.sdk }}
      - id: install
        name: Install dependencies
        run: pub get
      - name: Run VM tests
        run: pub run test --platform vm
        if: always() && steps.install.outcome == 'success'
      - name: Run Chrome tests
        run: pub run test --platform chrome
        if: always() && steps.install.outcome == 'success'
